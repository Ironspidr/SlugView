
class  Planet {
    __init__(planet){
        self.planet = planet
        self.location
    }
    find_location(self){
        var planets = {
            "earth":'models/LowPolyEarth.glb',
            "sun":'models/LowPolyEarth.gl',
            "mercury":'models/LowPolyEarth.lb',
            "venus":'models/LowPolyEarth.gb'
        }
        for(var Key in planets){
            if(Key == self.planet){
                self.location = planets[Key]
            }
        }
    }
    spawn_planet(self){
        find_location(self)
        const loader = new GLTFLoader()
        loader.load(location, function(glb){
            root = glb.scene
            scene.add(root)
    })}
    get_root(self){
        return self.root
    }
}
const earth = new Planet("earth")
earth.spawn_planet

 //time tracking
    const clock = new THREE.Clock()
    const currentTime = Date.now()
    const deltaTime = currentTime - time
    time = currentTime
    const elapsed = clock.elapsedTime
    //earth Pos
    earthMesh.position.x = Math.sin(elapsed/2) * 3
    earthMesh.position.z = Math.cos(elapsed/2) * 3
    
    //satellite
    satellite.position.x = earthMesh.position.x + Math.sin(deltaTime/(5*10^(-10))) * 10
    satellite.position.z = earthMesh.position.z + Math.cos(deltaTime/(5*10^(10))) * 10
    satellite.rotation.x += 0.0001 * deltaTime
    satellite.rotation.z += 0.0001 * deltaTime

    var planets = {
        "earth":'models/LowPolyEarth.glb',
        "sun":'models/LowPolyEarth.gl',
        "mercury":'models/LowPolyEarth.lb',
        "venus":'models/LowPolyEarth.gb',
    } 
    for(var Key in planets){
        var location = planets[Key]
        console.log(Key, location)
        if(planet ==  Key){
            const loader = new GLTFLoader()
            loader.load(location, function(glb){
            const root = glb.scene
            scene.add(root)
            
})
            }
        else{
            console.log("REEEEE")
        }
    }
}


// Canvas
const canvas = document.querySelector('canvas.webgl')

// Scene
const scene = new THREE.Scene()

// Object
const geometry = new THREE.SphereGeometry(4, 22, 10)
const material = new THREE.MeshBasicMaterial({ color: 0xffff00 })
const mesh = new THREE.Mesh(geometry, material)
scene.add(mesh)

// Sizes
const sizes = {
        width: window.innerWidth,
        height: window.innerHeight
    }
    
    // Camera
    const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height)
    camera.position.z = 15
    scene.add(camera)
    
    // Renderer
    const renderer = new THREE.WebGLRenderer({
            canvas: canvas
        })
        renderer.setSize(sizes.width, sizes.height)
        
        // //Reference Time
        // let time = Date.now()
        
        //Clock
        // const clock = new THREE.Clock()
        
        gsap.to(mesh.position, { duration: 1, delay: 1, x: 2 })
        gsap.to(mesh.position, { duration: 1, delay: 2, x: -2 })
        
        //Animations
        const tick = () =>
            {
            //Time
            const currentTime = Date.now()
            const deltaTime = currentTime - time
            time = currentTime
            console.log(deltaTime)
        
            //Clock
            const elapsedTime = clock.getElapsedTime()
            console.log(elapsedTime)
            //Update Objects
            camera.position.x = Math.sin(elapsedTime)
            camera.position.y = Math.cos(elapsedTime)
            camera.lookAt(mesh.position)
        
        
            //Render
            renderer.render(scene, camera)
            window.requestAnimationFrame(tick)
            sizes = {
                    width: window.innerWidth,
                    height: window.innerHeight
                }
                renderer.setSize(sizes.width,sizes.height)
            }
            tick()
            function animate()
            {
                    //time tracking
                    var delta = clock.getDelta();
                    var elapsed = clock.elapsedTime;
                
                    //sphere position
                    sphere.position.x = Math.sin(elapsed/2) * 3;
                    sphere.position.z = Math.cos(elapsed/2) * 3;
                
                    //satellite
                    satellite.position.x =  sphere.position.x + Math.sin(elapsed*2) * 2;
                    satellite.position.z = sphere.position.z + Math.cos(elapsed*2) * 2;
                    satellite.rotation.x += 0.4 * delta;
                    satellite.rotation.y += 0.2 * delta;
                
                    requestAnimationFrame( animate );
                    controls.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true
                    renderer.render( scene, camera );
                }
// camera.position.x = 20
// const location = 'models/LowPolyEarth.glb'
// const loader = new GLTFLoader()
// loader.load(location, function(glb){
//     console.log(glb)
//     const root = glb.scene
//     scene.add(root)
// })